{"version":3,"file":"js/651.e0bbfdf4.js","mappings":"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","sources":["webpack://mvtime/./src/assets/todo.md","webpack://mvtime/./src/components/ToggleBar.vue","webpack://mvtime/./src/components/ToggleBar.vue?75d5","webpack://mvtime/./src/views/Home/TodoView.vue","webpack://mvtime/./src/views/Home/TodoView.vue?40a1"],"sourcesContent":["// Module\nvar code = \"<h1 id=\\\"general-purpose--goal\\\">General Purpose / Goal</h1> <ul> <li>Crowdsource data from students<ul> <li>lower teacher inclusion / necessary involvement</li> </ul> </li> <li>Create a generally sleek product<ul> <li>we&#39;re not trying to win any design contests, but we want people to want to use it</li> </ul> </li> <li>Help student health<ul> <li>study resources from data, better planning</li> </ul> </li> <li>Collect student wellness data<ul> <li>will allow us to show its usefulness</li> <li>what led us to start this project in the first place, advocating for student health</li> </ul> </li> </ul> <h1 id=\\\"changes\\\">Changes</h1> <h2 id=\\\"priorities\\\">Priorities</h2> <ul> <li><strong>Adding pre-set classes</strong><ul> <li>teachers dont have to join</li> <li>students able to add tasks to their classes / teachers can invite students to edit their classes</li> <li>sync from that huge json file</li> </ul> </li> <li><strong>Tutorial Videos</strong></li> <li><strong>Daily emails / EoD updates</strong><ul> <li>reminders the day before tests/exams</li> <li><del>better email prefs</del></li> </ul> </li> <li><strong>AI/ML/Just &quot;seems like magic&quot; features, can be hardcoded</strong><ul> <li>automatic session plans &amp; time management alerts</li> <li><del>through API</del></li> <li><del>things like automatic link names, task typing</del></li> </ul> </li> </ul> <h2 id=\\\"working-on-now--planned-soon-sander\\\">Working on Now / Planned Soon (Sander)</h2> <ul> <li><p>Classes</p> <ul> <li><strong>add from pre-set list</strong><ul> <li>setup from json / claim pre-set class feature (cloud?)</li> </ul> </li> <li>view students in class for teacher/current students<ul> <li>backend listener to use &amp; keep updated class documents with students array?</li> </ul> </li> <li>more unique/protected join codes, invite/accepted-only?</li> <li>display join code to class</li> <li><del>class view page</del></li> <li><del>make classes editable</del></li> <li><del>join from code</del></li> </ul> </li> <li><p>Task Creation</p> <ul> <li><del>better keyboard shortcuts (+ and t,p,e,q=quiz, etc)</del></li> <li><del>shortcuts on <code>position:fixed</code> layouts, fullscreen</del><ul> <li><del>migrate to new system that puts it outside of the sidebar element</del></li> </ul> </li> <li>class selection popup on creation hotkey</li> </ul> </li> <li><p>Studying</p> <ul> <li>save sessions and review them later</li> <li><del>system for studying/working on tasks</del></li> <li><del>track task completion based on id</del><ul> <li>track by hash for updated versions, perhaps preference for specificity</li> </ul> </li> <li><del>ability to mark tasks as done</del></li> <li><del>notes on tasks</del></li> <li><del>sort as classes/dates in study view</del></li> </ul> </li> <li><p>Admin / Contact</p> <ul> <li><strong>Add/implement analytics</strong></li> <li>Send messages from w/i the app using mail system<ul> <li>user will receive a copy</li> </ul> </li> <li>District portal</li> <li>Admin portal<ul> <li>create portal based on /portal but with panel in place of calendar</li> <li>ability to fix errors that might impede usability for students</li> <li>ability to view student surveys in bulk - form-type</li> <li>force reload student sessions to update / quickfix</li> <li>add more protections to teacher mode</li> </ul> </li> </ul> </li> <li><p>Student involvement</p> <ul> <li>way for students to access teacher features for their peers / as a proxy for the teacher</li> <li>student self &quot;classes&quot; for things specific to them to keep track of, all in one place</li> </ul> </li> <li><p>Tasks</p> <ul> <li>AI/ML/Maybe just hardcoded features<ul> <li><del><strong>auto-suggested link names based on domain</strong></del></li> <li><del>auto-suggested task types based on title</del></li> <li>automatic / algorithm-driven study suggestions?</li> </ul> </li> <li>Links<ul> <li>allow / encourage links to other classes / through selector</li> <li>allowed outlink domains set by district?</li> </ul> </li> <li>Create studying / prep pages<ul> <li>really use the data/info that we have, let them create study schedules for themselves</li> <li><del>see upcoming assignments and mark them as done</del></li> </ul> </li> <li><del>fixes on edit page</del></li> <li><del>process only changed tasks server-side / cancel runs on double changes</del></li> <li><del>store proxy in class doc - load from there for efficiency / read &amp; write count</del></li> <li><del>disallow finish when link still in-progress</del></li> <li><del>drag tasks on calendar to change date</del></li> </ul> </li> <li><p>Surveys</p> <ul> <li>Create survey / check-in modal<ul> <li>time-based variations<ul> <li>on mondays, more in-depth, before first use</li> </ul> </li> <li><del>add graphics / illustrations (on weekly at least)</del><ul> <li><del>during the week, short non-intrusive</del></li> </ul> </li> </ul> </li> <li><del>make a way for users to see their own responses over time</del><ul> <li>include major assignments in this timeline</li> </ul> </li> <li>weekly / major surveys</li> <li><del>show upcoming tasks at end of daily surveys</del></li> <li><del>daily surveys</del></li> </ul> </li> <li><p>Onboarding</p> <ul> <li><strong>setup from pre-defined classes</strong>, add your own<ul> <li><strong>create tutorial videos</strong><ul> <li>View calendar</li> <li>Complete tasks on study page</li> <li>Link accounts</li> <li>View stats</li> </ul> </li> </ul> </li> <li><del>add keyboard shortcuts page on (/ or ?)</del></li> <li><del>large modal type for intro</del></li> <li><del>tutorial modal set up</del></li> <li><del>where to find everything</del><ul> <li><del>ui tutorial</del></li> </ul> </li> <li><del>better logout prompt</del></li> <li><del>add first class</del></li> <li><del>join modal</del></li> </ul> </li> <li><p>Emails</p> <ul> <li>setup cloud functions to send <strong>daily</strong>(?) emails</li> <li><del>exclude tasks marked as finished from weekly summary emails</del></li> <li><del>setup cloud functions to send task change/create/archive emails</del></li> <li><del>setup cloud functions to send weekly emails</del></li> <li><del>link personal account email</del></li> <li><del>email template</del></li> <li><del>setup email server</del></li> <li><del>send from firebase doc</del></li> </ul> </li> <li><p>Accounts/ Customization</p> <ul> <li>fix linking feature??</li> <li><del>Better prefs</del><ul> <li><del>add email prefs</del></li> <li><del>save theme under prefs, rather than its own key</del></li> <li><del>add the option to trust another email / oauth account with access to your account</del><ul> <li><del>good for phones and such, save to prefs of the acc, then check either request oauth is student, or request oauth is in student prefs.trusted</del></li> </ul> </li> </ul> </li> <li><del>Make art assets</del><ul> <li><del>implement animations</del><ul> <li><del>loading imgs</del></li> </ul> </li> <li><del>implement transitions</del><ul> <li><del>for modals</del></li> </ul> </li> <li><del>Create promotional materials</del><ul> <li><del>update og:img</del></li> <li><del>create public/img/promo imgs</del></li> </ul> </li> <li><del>Create contact page</del><ul> <li><del>fun lighthearted art stuff</del></li> </ul> </li> </ul> </li> <li><del>create email prefs screen</del></li> <li><del>finish personal account connection</del></li> <li><del>create prefs screen</del></li> <li><del>allow connected personal / non-school email</del><ul> <li><del>settings from portal / email links</del></li> </ul> </li> </ul> </li> <li><p><del>Mobile Interface</del></p> <ul> <li><del>pages on mobile instead of sidebars</del></li> </ul> </li> <li><p><del>Non-User-Facing</del></p> <ul> <li><del>cleanup code / write docs</del> <del>Tasks / Calendar Objects</del></li> <li><del>note type / generic info w/o color</del></li> <li><del>regular assignment / generic task type</del></li> <li><del>id tasks for easier load/share</del></li> <li><del>view task by task id</del></li> <li><del>less cluttered scheduling options (use dropdown)</del></li> <li><del>convert /task to /view/{type}/{info}</del></li> <li><del>add editing functionality</del></li> <li><del>confirm task delete</del></li> </ul> </li> <li><p><del>Modal features</del></p> <ul> <li><del>fix overflow on very small screens</del></li> <li><del>redirect modal / outlink interceptor</del></li> </ul> </li> </ul> <h2 id=\\\"specific-milestones--tasks-aarush\\\">Specific milestones / tasks (Aarush)</h2> <ul> <li>Create backend<ul> <li>Algorithms<ul> <li>Class Spread: N/A</li> </ul> </li> <li>Send out emails to students thru firebase?</li> </ul> </li> <li>a cleaner system to integrate classes<ul> <li>Structure teacher add/drop class json update algorithm</li> </ul> </li> <li><del>Create data for static classes</del></li> </ul> \";\n// Exports\nexport default code;","<template>\n  <div\n    class=\"toggle_switch\"\n    :class=\"{ toggle_switch__on: is_on, transition: !loads }\"\n    :disabled=\"disabled\"\n    @click=\"toggle\"\n  >\n    <div v-if=\"loads\" class=\"toggle_switch__loading\" :class=\"{ is_loading: loading }\">\n      <span class=\"loading_bg\"></span>\n    </div>\n    <div class=\"toggle_switch_knob\"></div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"ToggleBar\",\n  props: {\n    value: {\n      type: Boolean,\n      default: false,\n    },\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n    loads: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  emits: [\"update\"],\n  data() {\n    return {\n      is_on: this.value,\n      loading: false,\n    };\n  },\n  watch: {\n    value() {\n      this.is_on = this.value;\n      this.loading = false;\n    },\n  },\n  methods: {\n    toggle() {\n      if (this.disabled) return;\n      if (this.loads) {\n        this.loading = true;\n      } else {\n        this.is_on = !this.is_on;\n      }\n      this.$emit(\"update\", !this.is_on);\n    },\n  },\n};\n</script>\n\n<style scoped>\n.toggle_switch {\n  display: inline-block;\n  overflow: hidden;\n  user-select: none;\n  font-size: 1.4em;\n  width: 2.2em;\n  height: 1em;\n  border-radius: var(--radius-button-display);\n  background-color: var(--color-button-display);\n  position: relative;\n  cursor: pointer;\n  opacity: 0.8;\n}\n.toggle_switch.transition {\n  transition: background-color 0.2s ease-in-out;\n}\n.toggle_switch[disabled=\"true\"] {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n.toggle_switch_knob {\n  width: calc(1em - 6px);\n  height: calc(1em - 6px);\n  border-radius: calc(0.7 * var(--radius-button-display));\n  background-color: var(--color-on-overlay-input);\n  position: absolute;\n  top: 3px;\n  left: 3px;\n\n  opacity: 0.3;\n}\n.toggle_switch .toggle_switch_knob {\n  transition: left 0.1s ease-in-out, scale 0.1s ease-in-out;\n}\n.toggle_switch.transition .toggle_switch_knob {\n  transition: left 0.2s ease-in-out, background-color 0.2s ease-in-out, opacity 0.2s ease-in-out,\n    scale 0.1s ease-in-out;\n}\nmain.parent:not(.simplified) .toggle_switch:not([disabled=\"true\"]):hover .toggle_switch_knob {\n  left: 6px;\n  scale: 0.9;\n}\n\nmain.parent:not(.simplified)\n  .toggle_switch:not([disabled=\"true\"]).toggle_switch__on:hover\n  .toggle_switch_knob {\n  left: calc(100% - 1em);\n}\n\n.toggle_switch__on {\n  background-color: var(--color-theme-alt);\n}\n.toggle_switch__on .toggle_switch_knob {\n  left: calc(100% - 1em + 3px);\n  background-color: var(--color-theme);\n  opacity: 1;\n}\n\n.toggle_switch__loading {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 2;\n  background-color: var(--color-button-display);\n  opacity: 0;\n  transition: opacity 0.05s ease-in-out;\n  transition-delay: 0.1s;\n}\n.toggle_switch__loading.is_loading {\n  opacity: 1;\n}\n.toggle_switch__loading > .loading_bg {\n  display: block;\n  width: 100%;\n  height: 100%;\n  background-size: 1.5em;\n  filter: invert(0.8);\n}\n</style>\n","import { render } from \"./ToggleBar.vue?vue&type=template&id=521703de&scoped=true\"\nimport script from \"./ToggleBar.vue?vue&type=script&lang=js\"\nexport * from \"./ToggleBar.vue?vue&type=script&lang=js\"\n\nimport \"./ToggleBar.vue?vue&type=style&index=0&id=521703de&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-521703de\"]])\n\nexport default __exports__","<template>\n  <main class=\"todo center-1000\" :class=\"{ show_completed: showCompleted }\">\n    <div class=\"todo_header\">\n      <h2 class=\"header_style\">Feature Roadmap</h2>\n      <br />\n      <h3 class=\"secondary_home_text\">\n        Here's a peek at our planned features. We're always open to suggestions, just\n        <router-link class=\"click-action\" to=\"/contact\">shoot us a message</router-link>!\n      </h3>\n      <br />\n      <div v-if=\"renderedTodo\" class=\"toggle_line\">\n        <ToggleBar\n          class=\"click-action\"\n          :value=\"showCompleted\"\n          @update=\"showCompleted = !showCompleted\"\n          :loads=\"false\"\n        />&nbsp;\n        <span>Show completed items</span>\n      </div>\n    </div>\n    <hr />\n    <div class=\"todo_body md mono\">\n      <div v-if=\"renderedTodo\" v-html=\"renderedTodo\"></div>\n      <div v-else class=\"todo_placeholder\">\n        <img alt=\"Loading...\" class=\"loading_icon\" />\n      </div>\n    </div>\n  </main>\n</template>\n\n<script>\nimport \"@/assets/style/markdown.css\";\nimport ToggleBar from \"@/components/ToggleBar.vue\";\nexport default {\n  name: \"TodoView\",\n  components: {\n    ToggleBar,\n  },\n  data() {\n    return {\n      renderedTodo: \"\",\n      showCompleted: false,\n    };\n  },\n  computed: {\n    todoMarkdown() {\n      try {\n        return require(\"@/assets/todo.md\");\n      } catch (e) {\n        return null;\n      }\n    },\n  },\n  mounted() {\n    // The content is already converted to HTML by markdown-loader and html-loader\n    this.renderedTodo = this.todoMarkdown?.default;\n  },\n};\n</script>\n\n<style scoped>\n.toggle_line {\n  /* font-size: 14px; */\n  line-height: 1.75;\n  display: inline-flex;\n  align-items: center;\n  gap: 0.5em;\n}\nmain.todo {\n  height: 100%;\n  display: flex;\n  flex-flow: column nowrap;\n  justify-content: center;\n  align-items: flex-start;\n}\nmain.todo .todo_header {\n  max-width: 600px;\n}\nmain.todo > hr {\n  width: 100%;\n  margin: 20px 0;\n  border: 0;\n  height: 3px;\n  border-radius: 4px;\n  opacity: 0.8;\n  background-image: linear-gradient(to right, var(--color-theme) 50px, rgba(0, 0, 0, 0) 75%);\n}\n.todo_body {\n  opacity: 0.8;\n  line-height: 1.7em;\n  font-family: Lato, Inter, sans-serif;\n  width: 100%;\n  max-width: 1000px;\n  cursor: default;\n}\n\n.todo_placeholder {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-grow: 1;\n}\nh3.secondary_home_text {\n  font-size: 20px;\n  line-height: 32px;\n}\n</style>\n<style>\n.todo_body ul ul > li:has(> del) {\n  opacity: 0.5;\n  scale: 0.95;\n  transform-origin: -1em;\n  line-height: 1.15em;\n  transition: opacity 0.2s ease-in-out;\n}\n.todo:not(.show_completed) li:has(> del),\n.todo:not(.show_completed) li:has(> p > del:only-child) {\n  display: none !important;\n}\n.todo_body ul > li:hover {\n  opacity: 1;\n}\nmain.todo strong,\nmain.todo b {\n  background-color: var(--color-theme);\n  color: var(--color-theme-accent);\n  padding: 0 0.3em;\n}\n</style>\n","import { render } from \"./TodoView.vue?vue&type=template&id=4369201d&scoped=true\"\nimport script from \"./TodoView.vue?vue&type=script&lang=js\"\nexport * from \"./TodoView.vue?vue&type=script&lang=js\"\n\nimport \"./TodoView.vue?vue&type=style&index=0&id=4369201d&scoped=true&lang=css\"\nimport \"./TodoView.vue?vue&type=style&index=1&id=4369201d&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-4369201d\"]])\n\nexport default __exports__"],"names":["code","_createElementVNode","class","_hoisted_2","_createElementBlock","_normalizeClass","toggle_switch__on","$data","is_on","transition","$props","loads","disabled","onClick","_cache","args","$options","toggle","key","is_loading","loading","_hoisted_3","_createCommentVNode","_hoisted_4","_hoisted_1","name","props","value","type","Boolean","default","emits","data","this","watch","methods","$emit","__exports__","render","alt","_hoisted_12","show_completed","showCompleted","_createTextVNode","_createVNode","_component_router_link","to","_withCtx","_","_hoisted_5","renderedTodo","_hoisted_6","_component_ToggleBar","onUpdate","$event","_hoisted_7","_hoisted_8","_hoisted_9","innerHTML","_hoisted_10","_hoisted_11","_hoisted_13","components","ToggleBar","computed","todoMarkdown","require","e","mounted"],"sourceRoot":""}